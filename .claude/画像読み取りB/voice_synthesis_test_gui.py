import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import threading
import subprocess
import json
import hashlib
from datetime import datetime
import tempfile
import pygame

class VoiceSynthesisTestGUI:
    """
    音声合成テスト専用GUI
    標準音声合成とAI音声クローンをテスト
    """
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("音声合成テストツール")
        self.root.geometry("800x700")
        
        # 作業フォルダ
        self.output_folder = "voice_synthesis_test"
        self.sample_folder = os.path.join(self.output_folder, "voice_samples")
        self.generated_folder = os.path.join(self.output_folder, "generated_voices")
        
        os.makedirs(self.output_folder, exist_ok=True)
        os.makedirs(self.sample_folder, exist_ok=True)
        os.makedirs(self.generated_folder, exist_ok=True)
        
        # pygame初期化
        try:
            pygame.mixer.init()
            self.audio_enabled = True
        except:
            self.audio_enabled = False
            print("音声再生機能が無効です")
        
        self.setup_ui()
        
    def setup_ui(self):
        """UI構築"""
        # メインノートブック
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # タブ1: 標準音声合成
        self.setup_standard_tts_tab(notebook)
        
        # タブ2: AI音声クローン
        self.setup_ai_voice_tab(notebook)
        
        # タブ3: テスト結果
        self.setup_results_tab(notebook)
        
        # ステータスバー
        self.status_var = tk.StringVar(value="準備完了")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def setup_standard_tts_tab(self, notebook):
        """標準音声合成タブ"""
        frame = ttk.Frame(notebook)
        notebook.add(frame, text="標準音声合成")
        
        # タイトル
        title = ttk.Label(frame, text="標準音声合成テスト", font=("MS Gothic", 14, "bold"))
        title.pack(pady=10)
        
        # エンジン選択フレーム
        engine_frame = ttk.LabelFrame(frame, text="音声エンジン選択", padding=10)
        engine_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.engine_var = tk.StringVar(value="pyttsx3")
        engines = [
            ("pyttsx3 (標準)", "pyttsx3"),
            ("Windows SAPI (高品質)", "sapi"),
            ("eSpeak (軽量)", "espeak"),
            ("Coqui TTS (AI)", "coqui")
        ]
        
        for i, (text, value) in enumerate(engines):
            ttk.Radiobutton(engine_frame, text=text, variable=self.engine_var, 
                           value=value).grid(row=i//2, column=i%2, sticky=tk.W, padx=20)
        
        # 単語入力フレーム
        input_frame = ttk.LabelFrame(frame, text="音声生成", padding=10)
        input_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(input_frame, text="テキスト:").grid(row=0, column=0, sticky=tk.W)
        self.text_entry = ttk.Entry(input_frame, width=30)
        self.text_entry.grid(row=0, column=1, padx=5, sticky=tk.W+tk.E)
        self.text_entry.insert(0, "こんにちは")\n        \n        ttk.Button(input_frame, text="音声生成", \n                  command=self.generate_single_voice).grid(row=0, column=2, padx=5)\n        ttk.Button(input_frame, text="再生テスト", \n                  command=self.test_generated_voice).grid(row=0, column=3, padx=5)\n        \n        input_frame.columnconfigure(1, weight=1)\n        \n        # 一括生成フレーム\n        batch_frame = ttk.LabelFrame(frame, text="一括音声生成", padding=10)\n        batch_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n        \n        # プリセット選択\n        preset_frame = ttk.Frame(batch_frame)\n        preset_frame.pack(fill=tk.X, pady=5)\n        \n        ttk.Label(preset_frame, text="プリセット:").pack(side=tk.LEFT)\n        self.preset_var = tk.StringVar(value="numbers")\n        preset_combo = ttk.Combobox(preset_frame, textvariable=self.preset_var, width=15)\n        preset_combo['values'] = ("numbers", "greetings", "shopping", "custom")\n        preset_combo.pack(side=tk.LEFT, padx=5)\n        \n        ttk.Button(preset_frame, text="プリセット読み込み", \n                  command=self.load_preset).pack(side=tk.LEFT, padx=5)\n        ttk.Button(preset_frame, text="一括生成開始", \n                  command=self.start_batch_generation).pack(side=tk.LEFT, padx=10)\n        \n        # 単語リスト\n        ttk.Label(batch_frame, text="生成する単語リスト:").pack(anchor=tk.W)\n        self.word_list_text = scrolledtext.ScrolledText(batch_frame, height=8, width=60)\n        self.word_list_text.pack(fill=tk.BOTH, expand=True, pady=5)\n        \n        # 進捗表示\n        self.progress_var = tk.StringVar(value="")\n        ttk.Label(batch_frame, textvariable=self.progress_var).pack(anchor=tk.W)\n        \n        self.progress_bar = ttk.Progressbar(batch_frame, mode='determinate')\n        self.progress_bar.pack(fill=tk.X, pady=5)\n        \n    def setup_ai_voice_tab(self, notebook):\n        """AI音声クローンタブ"""\n        frame = ttk.Frame(notebook)\n        notebook.add(frame, text="AI音声クローン")\n        \n        # タイトル\n        title = ttk.Label(frame, text="AI音声クローン実験", font=("MS Gothic", 14, "bold"))\n        title.pack(pady=10)\n        \n        # 警告表示\n        warning = ttk.Label(frame, text="⚠️ この機能は実験的です。高性能なPCが必要です。", \n                           foreground="red", font=("MS Gothic", 10, "bold"))\n        warning.pack(pady=5)\n        \n        # 音声サンプル登録フレーム\n        sample_frame = ttk.LabelFrame(frame, text="音声サンプル登録", padding=10)\n        sample_frame.pack(fill=tk.X, padx=10, pady=5)\n        \n        ttk.Label(sample_frame, text="話者名:").grid(row=0, column=0, sticky=tk.W)\n        self.speaker_name = ttk.Entry(sample_frame, width=20)\n        self.speaker_name.grid(row=0, column=1, padx=5, sticky=tk.W+tk.E)\n        self.speaker_name.insert(0, "MyVoice")\n        \n        self.sample_file_var = tk.StringVar()\n        ttk.Button(sample_frame, text="音声ファイル選択", \n                  command=self.select_sample_file).grid(row=0, column=2, padx=5)\n        \n        ttk.Label(sample_frame, textvariable=self.sample_file_var, \n                 foreground="blue").grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=5)\n        \n        ttk.Button(sample_frame, text="サンプル登録", \n                  command=self.register_voice_sample).grid(row=2, column=0, pady=5)\n        ttk.Button(sample_frame, text="サンプル再生", \n                  command=self.play_sample).grid(row=2, column=1, pady=5)\n        \n        sample_frame.columnconfigure(1, weight=1)\n        \n        # AI音声生成フレーム\n        ai_gen_frame = ttk.LabelFrame(frame, text="AI音声生成", padding=10)\n        ai_gen_frame.pack(fill=tk.X, padx=10, pady=5)\n        \n        ttk.Label(ai_gen_frame, text="生成テキスト:").grid(row=0, column=0, sticky=tk.W)\n        self.ai_text_entry = ttk.Entry(ai_gen_frame, width=30)\n        self.ai_text_entry.grid(row=0, column=1, padx=5, sticky=tk.W+tk.E)\n        self.ai_text_entry.insert(0, "新しい言葉です")\n        \n        ttk.Button(ai_gen_frame, text="AI音声生成", \n                  command=self.generate_ai_voice).grid(row=0, column=2, padx=5)\n        ttk.Button(ai_gen_frame, text="生成音声再生", \n                  command=self.play_ai_voice).grid(row=0, column=3, padx=5)\n        \n        ai_gen_frame.columnconfigure(1, weight=1)\n        \n        # AI設定フレーム\n        ai_settings_frame = ttk.LabelFrame(frame, text="AI設定・インストール", padding=10)\n        ai_settings_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n        \n        # インストール状態チェック\n        check_frame = ttk.Frame(ai_settings_frame)\n        check_frame.pack(fill=tk.X, pady=5)\n        \n        ttk.Button(check_frame, text="AI音声ライブラリ確認", \n                  command=self.check_ai_libraries).pack(side=tk.LEFT)\n        ttk.Button(check_frame, text="自動インストール", \n                  command=self.install_ai_libraries).pack(side=tk.LEFT, padx=10)\n        \n        # インストール状態表示\n        self.ai_status_text = scrolledtext.ScrolledText(ai_settings_frame, height=10, width=60)\n        self.ai_status_text.pack(fill=tk.BOTH, expand=True, pady=5)\n        \n        # 初期チェック実行\n        self.check_ai_libraries()\n    \n    def setup_results_tab(self, notebook):\n        """テスト結果タブ"""\n        frame = ttk.Frame(notebook)\n        notebook.add(frame, text="テスト結果")\n        \n        # タイトル\n        title = ttk.Label(frame, text="生成済み音声ファイル", font=("MS Gothic", 14, "bold"))\n        title.pack(pady=10)\n        \n        # ファイルリスト\n        list_frame = ttk.Frame(frame)\n        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n        \n        # Treeview\n        columns = ("filename", "text", "engine", "size", "date")\n        self.file_tree = ttk.Treeview(list_frame, columns=columns, show="headings")\n        \n        self.file_tree.heading("filename", text="ファイル名")\n        self.file_tree.heading("text", text="テキスト")\n        self.file_tree.heading("engine", text="エンジン")\n        self.file_tree.heading("size", text="サイズ")\n        self.file_tree.heading("date", text="作成日時")\n        \n        self.file_tree.column("filename", width=200)\n        self.file_tree.column("text", width=150)\n        self.file_tree.column("engine", width=100)\n        self.file_tree.column("size", width=80)\n        self.file_tree.column("date", width=120)\n        \n        # スクロールバー\n        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.file_tree.yview)\n        self.file_tree.configure(yscrollcommand=scrollbar.set)\n        \n        self.file_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n        \n        # ボタンフレーム\n        button_frame = ttk.Frame(frame)\n        button_frame.pack(fill=tk.X, padx=10, pady=5)\n        \n        ttk.Button(button_frame, text="リスト更新", \n                  command=self.refresh_file_list).pack(side=tk.LEFT)\n        ttk.Button(button_frame, text="選択ファイル再生", \n                  command=self.play_selected_file).pack(side=tk.LEFT, padx=5)\n        ttk.Button(button_frame, text="選択ファイル削除", \n                  command=self.delete_selected_file).pack(side=tk.LEFT, padx=5)\n        ttk.Button(button_frame, text="フォルダを開く", \n                  command=self.open_output_folder).pack(side=tk.LEFT, padx=10)\n        \n        # 初期リスト表示\n        self.refresh_file_list()\n    \n    def load_preset(self):\n        """プリセット単語リストを読み込み"""\n        preset = self.preset_var.get()\n        \n        presets = {\n            "numbers": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", \n                       "百", "千", "万", "円", "個", "本", "枚"],\n            "greetings": ["こんにちは", "こんばんは", "おはようございます", \n                         "ありがとうございます", "すみません", "失礼します", \n                         "いらっしゃいませ", "お疲れ様です"],\n            "shopping": ["価格", "値段", "料金", "商品", "商品名", "割引", "セール", \n                       "特価", "限定", "送料", "無料", "税込", "税抜", "レジ", "会計"],\n            "custom": ["カスタム", "テスト", "音声", "合成", "確認"]\n        }\n        \n        if preset in presets:\n            words = "\\n".join(presets[preset])\n            self.word_list_text.delete(1.0, tk.END)\n            self.word_list_text.insert(1.0, words)\n    \n    def generate_single_voice(self):\n        """単一音声生成"""\n        text = self.text_entry.get().strip()\n        if not text:\n            messagebox.showwarning("警告", "テキストを入力してください")\n            return\n        \n        engine = self.engine_var.get()\n        self.status_var.set(f"音声生成中: {text} ({engine})")\n        \n        # バックグラウンドで生成\n        thread = threading.Thread(target=self._generate_voice_worker, args=(text, engine))\n        thread.daemon = True\n        thread.start()\n    \n    def _generate_voice_worker(self, text, engine):\n        """音声生成ワーカー"""\n        try:\n            output_file = self._generate_voice_file(text, engine)\n            if output_file and os.path.exists(output_file):\n                self.status_var.set(f"生成完了: {os.path.basename(output_file)}")\n                self.refresh_file_list()\n            else:\n                self.status_var.set("生成失敗")\n        except Exception as e:\n            self.status_var.set(f"エラー: {e}")\n    \n    def _generate_voice_file(self, text, engine):\n        """音声ファイル生成の実装"""\n        text_hash = hashlib.md5(text.encode()).hexdigest()[:8]\n        output_file = os.path.join(self.generated_folder, f"{engine}_{text_hash}_{text[:10]}.wav")\n        \n        if engine == "pyttsx3":\n            return self._generate_pyttsx3(text, output_file)\n        elif engine == "sapi":\n            return self._generate_sapi(text, output_file)\n        elif engine == "espeak":\n            return self._generate_espeak(text, output_file)\n        elif engine == "coqui":\n            return self._generate_coqui(text, output_file)\n        else:\n            return None\n    \n    def _generate_pyttsx3(self, text, output_file):\n        """pyttsx3で音声生成"""\n        try:\n            import pyttsx3\n            engine = pyttsx3.init()\n            \n            # 日本語音声設定\n            voices = engine.getProperty('voices')\n            for voice in voices:\n                if 'japanese' in voice.name.lower() or 'japan' in voice.name.lower():\n                    engine.setProperty('voice', voice.id)\n                    break\n            \n            engine.setProperty('rate', 150)\n            engine.setProperty('volume', 0.9)\n            \n            engine.save_to_file(text, output_file)\n            engine.runAndWait()\n            \n            return output_file if os.path.exists(output_file) else None\n            \n        except Exception as e:\n            print(f"pyttsx3エラー: {e}")\n            return None\n    \n    def _generate_sapi(self, text, output_file):\n        """Windows SAPIで音声生成"""\n        try:\n            import win32com.client\n            \n            sapi = win32com.client.Dispatch("SAPI.SpVoice")\n            \n            # 日本語音声を探す\n            voices = sapi.GetVoices()\n            for i in range(voices.Count):\n                voice = voices.Item(i)\n                if 'japan' in voice.GetDescription().lower():\n                    sapi.Voice = voice\n                    break\n            \n            # ファイル出力設定\n            file_stream = win32com.client.Dispatch("SAPI.SpFileStream")\n            file_stream.Open(output_file, 3)\n            sapi.AudioOutputStream = file_stream\n            \n            sapi.Speak(text)\n            file_stream.Close()\n            \n            return output_file if os.path.exists(output_file) else None\n            \n        except Exception as e:\n            print(f"SAPI エラー: {e}")\n            return None\n    \n    def _generate_espeak(self, text, output_file):\n        """eSpeakで音声生成"""\n        try:\n            cmd = ["espeak", "-v", "ja", "-s", "150", "-w", output_file, text]\n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode == 0 and os.path.exists(output_file):\n                return output_file\n            else:\n                print(f"eSpeak エラー: {result.stderr}")\n                return None\n                \n        except FileNotFoundError:\n            print("eSpeakがインストールされていません")\n            return None\n        except Exception as e:\n            print(f"eSpeak エラー: {e}")\n            return None\n    \n    def _generate_coqui(self, text, output_file):\n        """Coqui TTSで音声生成"""\n        try:\n            from TTS.api import TTS\n            \n            tts = TTS(model_name="tts_models/ja/kokoro/tacotron2-DDC")\n            tts.tts_to_file(text=text, file_path=output_file)\n            \n            return output_file if os.path.exists(output_file) else None\n            \n        except ImportError:\n            print("Coqui TTSがインストールされていません")\n            return None\n        except Exception as e:\n            print(f"Coqui TTS エラー: {e}")\n            return None\n    \n    def start_batch_generation(self):\n        """一括音声生成開始"""\n        words_text = self.word_list_text.get(1.0, tk.END).strip()\n        if not words_text:\n            messagebox.showwarning("警告", "単語リストを入力してください")\n            return\n        \n        words = [w.strip() for w in words_text.split('\\n') if w.strip()]\n        if not words:\n            messagebox.showwarning("警告", "有効な単語がありません")\n            return\n        \n        engine = self.engine_var.get()\n        \n        self.progress_bar['maximum'] = len(words)\n        self.progress_bar['value'] = 0\n        \n        # バックグラウンドで生成\n        thread = threading.Thread(target=self._batch_generation_worker, args=(words, engine))\n        thread.daemon = True\n        thread.start()\n    \n    def _batch_generation_worker(self, words, engine):\n        """一括生成ワーカー"""\n        success_count = 0\n        \n        for i, word in enumerate(words):\n            self.progress_var.set(f"生成中 ({i+1}/{len(words)}): {word}")\n            \n            try:\n                output_file = self._generate_voice_file(word, engine)\n                if output_file and os.path.exists(output_file):\n                    success_count += 1\n                \n                self.progress_bar['value'] = i + 1\n                self.root.update_idletasks()\n                \n            except Exception as e:\n                print(f"生成エラー ({word}): {e}")\n        \n        self.progress_var.set(f"完了: {success_count}/{len(words)}個の音声を生成")\n        self.refresh_file_list()\n    \n    def test_generated_voice(self):\n        """生成した音声をテスト再生"""\n        text = self.text_entry.get().strip()\n        engine = self.engine_var.get()\n        \n        # 対応するファイルを探す\n        for root, dirs, files in os.walk(self.generated_folder):\n            for file in files:\n                if file.startswith(f"{engine}_") and text in file:\n                    file_path = os.path.join(root, file)\n                    self._play_audio_file(file_path)\n                    return\n        \n        messagebox.showinfo("情報", "対応する音声ファイルが見つかりません")\n    \n    def select_sample_file(self):\n        """AI用音声サンプルファイル選択"""\n        file_path = filedialog.askopenfilename(\n            title="音声サンプルファイルを選択",\n            filetypes=[\n                ("音声ファイル", "*.wav *.mp3 *.ogg *.m4a"),\n                ("すべてのファイル", "*.*")\n            ]\n        )\n        \n        if file_path:\n            self.sample_file_var.set(f"選択: {os.path.basename(file_path)}")\n            self.selected_sample_path = file_path\n    \n    def register_voice_sample(self):\n        """音声サンプル登録"""\n        speaker = self.speaker_name.get().strip()\n        if not speaker:\n            messagebox.showwarning("警告", "話者名を入力してください")\n            return\n        \n        if not hasattr(self, 'selected_sample_path'):\n            messagebox.showwarning("警告", "音声サンプルファイルを選択してください")\n            return\n        \n        try:\n            # サンプルファイルをコピー\n            import shutil\n            dest_path = os.path.join(self.sample_folder, f"{speaker}_sample.wav")\n            shutil.copy2(self.selected_sample_path, dest_path)\n            \n            messagebox.showinfo("成功", f"音声サンプルを登録しました: {speaker}")\n            \n        except Exception as e:\n            messagebox.showerror("エラー", f"サンプル登録エラー: {e}")\n    \n    def play_sample(self):\n        """登録した音声サンプル再生"""\n        speaker = self.speaker_name.get().strip()\n        sample_file = os.path.join(self.sample_folder, f"{speaker}_sample.wav")\n        \n        if os.path.exists(sample_file):\n            self._play_audio_file(sample_file)\n        else:\n            messagebox.showwarning("警告", "音声サンプルが見つかりません")\n    \n    def generate_ai_voice(self):\n        """AI音声生成（実験的）"""\n        speaker = self.speaker_name.get().strip()\n        text = self.ai_text_entry.get().strip()\n        \n        if not speaker or not text:\n            messagebox.showwarning("警告", "話者名とテキストを入力してください")\n            return\n        \n        sample_file = os.path.join(self.sample_folder, f"{speaker}_sample.wav")\n        if not os.path.exists(sample_file):\n            messagebox.showwarning("警告", "音声サンプルを先に登録してください")\n            return\n        \n        self.status_var.set("AI音声生成中...")\n        \n        # バックグラウンドで生成\n        thread = threading.Thread(target=self._ai_voice_worker, args=(speaker, text, sample_file))\n        thread.daemon = True\n        thread.start()\n    \n    def _ai_voice_worker(self, speaker, text, sample_file):\n        """AI音声生成ワーカー"""\n        try:\n            output_file = os.path.join(self.generated_folder, f"ai_{speaker}_{text[:10]}.wav")\n            \n            # Coqui TTSのvoice cloningを試す\n            success = self._try_coqui_voice_cloning(text, sample_file, output_file)\n            \n            if success:\n                self.status_var.set("AI音声生成完了")\n                self.refresh_file_list()\n            else:\n                self.status_var.set("AI音声生成失敗")\n                \n        except Exception as e:\n            self.status_var.set(f"AI音声エラー: {e}")\n    \n    def _try_coqui_voice_cloning(self, text, sample_file, output_file):\n        """Coqui TTSでvoice cloning試行"""\n        try:\n            from TTS.api import TTS\n            \n            # Voice cloningモデルを使用\n            tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2")\n            tts.tts_to_file(\n                text=text,\n                file_path=output_file,\n                speaker_wav=sample_file,\n                language="ja"\n            )\n            \n            return os.path.exists(output_file)\n            \n        except Exception as e:\n            print(f"Coqui voice cloning エラー: {e}")\n            return False\n    \n    def play_ai_voice(self):\n        """AI生成音声再生"""\n        speaker = self.speaker_name.get().strip()\n        text = self.ai_text_entry.get().strip()\n        \n        # 対応するファイルを探す\n        for root, dirs, files in os.walk(self.generated_folder):\n            for file in files:\n                if file.startswith(f"ai_{speaker}_") and text[:10] in file:\n                    file_path = os.path.join(root, file)\n                    self._play_audio_file(file_path)\n                    return\n        \n        messagebox.showinfo("情報", "対応するAI音声ファイルが見つかりません")\n    \n    def check_ai_libraries(self):\n        """AI音声ライブラリの確認"""\n        self.ai_status_text.delete(1.0, tk.END)\n        self.ai_status_text.insert(tk.END, "AI音声ライブラリ確認中...\\n\\n")\n        \n        libraries = [\n            ("torch", "PyTorch (深層学習フレームワーク)"),\n            ("TTS", "Coqui TTS (AI音声合成)"),\n            ("transformers", "Hugging Face Transformers"),\n            ("soundfile", "音声ファイル処理"),\n            ("librosa", "音声解析ライブラリ")\n        ]\n        \n        for lib, desc in libraries:\n            try:\n                __import__(lib)\n                self.ai_status_text.insert(tk.END, f"✓ {lib}: インストール済み ({desc})\\n")\n            except ImportError:\n                self.ai_status_text.insert(tk.END, f"✗ {lib}: 未インストール ({desc})\\n")\n        \n        self.ai_status_text.insert(tk.END, "\\n=== インストール方法 ===\\n")\n        self.ai_status_text.insert(tk.END, "pip install torch torchvision torchaudio\\n")\n        self.ai_status_text.insert(tk.END, "pip install coqui-tts\\n")\n        self.ai_status_text.insert(tk.END, "pip install transformers soundfile librosa\\n")\n    \n    def install_ai_libraries(self):\n        """AI音声ライブラリの自動インストール"""\n        if messagebox.askyesno("確認", "AI音声ライブラリをインストールしますか？\\n（数分かかる場合があります）"):\n            self.status_var.set("ライブラリインストール中...")\n            \n            thread = threading.Thread(target=self._install_libraries_worker)\n            thread.daemon = True\n            thread.start()\n    \n    def _install_libraries_worker(self):\n        """ライブラリインストールワーカー"""\n        try:\n            import subprocess\n            import sys\n            \n            libraries = [\n                "torch", "torchvision", "torchaudio", \n                "coqui-tts", "transformers", "soundfile", "librosa"\n            ]\n            \n            for lib in libraries:\n                self.status_var.set(f"インストール中: {lib}")\n                subprocess.run([sys.executable, "-m", "pip", "install", lib], \n                             capture_output=True)\n            \n            self.status_var.set("インストール完了")\n            self.check_ai_libraries()\n            \n        except Exception as e:\n            self.status_var.set(f"インストールエラー: {e}")\n    \n    def refresh_file_list(self):\n        """ファイルリスト更新"""\n        # 既存項目をクリア\n        for item in self.file_tree.get_children():\n            self.file_tree.delete(item)\n        \n        # ファイル検索\n        for root, dirs, files in os.walk(self.generated_folder):\n            for file in files:\n                if file.endswith(('.wav', '.mp3', '.ogg')):\n                    file_path = os.path.join(root, file)\n                    \n                    # ファイル情報取得\n                    try:\n                        stat = os.stat(file_path)\n                        size = f"{stat.st_size // 1024}KB"\n                        date = datetime.fromtimestamp(stat.st_mtime).strftime("%m/%d %H:%M")\n                        \n                        # ファイル名から情報抽出\n                        parts = file.replace('.wav', '').split('_')\n                        engine = parts[0] if parts else "unknown"\n                        text = parts[-1] if len(parts) > 1 else ""\n                        \n                        self.file_tree.insert("", tk.END, values=(\n                            file, text, engine, size, date\n                        ))\n                        \n                    except Exception as e:\n                        print(f"ファイル情報取得エラー: {e}")\n    \n    def play_selected_file(self):\n        """選択されたファイルを再生"""\n        selection = self.file_tree.selection()\n        if not selection:\n            messagebox.showwarning("警告", "再生するファイルを選択してください")\n            return\n        \n        item = self.file_tree.item(selection[0])\n        filename = item['values'][0]\n        file_path = os.path.join(self.generated_folder, filename)\n        \n        self._play_audio_file(file_path)\n    \n    def delete_selected_file(self):\n        """選択されたファイルを削除"""\n        selection = self.file_tree.selection()\n        if not selection:\n            messagebox.showwarning("警告", "削除するファイルを選択してください")\n            return\n        \n        item = self.file_tree.item(selection[0])\n        filename = item['values'][0]\n        file_path = os.path.join(self.generated_folder, filename)\n        \n        if messagebox.askyesno("確認", f"ファイルを削除しますか？\\n{filename}"):\n            try:\n                os.remove(file_path)\n                self.refresh_file_list()\n            except Exception as e:\n                messagebox.showerror("エラー", f"削除エラー: {e}")\n    \n    def open_output_folder(self):\n        """出力フォルダを開く"""\n        try:\n            import subprocess\n            subprocess.run(f'explorer "{os.path.abspath(self.output_folder)}"')\n        except Exception as e:\n            messagebox.showerror("エラー", f"フォルダを開けませんでした: {e}")\n    \n    def _play_audio_file(self, file_path):\n        """音声ファイル再生"""\n        if not self.audio_enabled:\n            messagebox.showwarning("警告", "音声再生機能が無効です")\n            return\n        \n        try:\n            sound = pygame.mixer.Sound(file_path)\n            sound.play()\n            self.status_var.set(f"再生中: {os.path.basename(file_path)}")\n        except Exception as e:\n            messagebox.showerror("エラー", f"再生エラー: {e}")\n    \n    def run(self):\n        """アプリケーション実行"""\n        self.root.mainloop()\n\ndef main():\n    try:\n        app = VoiceSynthesisTestGUI()\n        app.run()\n    except Exception as e:\n        import traceback\n        print(f"アプリケーション起動エラー: {e}")\n        traceback.print_exc()\n\nif __name__ == "__main__":\n    main()